import React, { useState, useEffect } from 'react';
import { PromptTemplate, TemplateCategory } from '../../types/ApiTypes';
import { 
    generateTemplateId, 
    validateTemplate, 
    getCategoryIcon, 
    getCategoryName 
} from '../utils/templateUtils';

interface TemplateEditorProps {
    template: PromptTemplate | null; // null –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
    isOpen: boolean;
    onClose: () => void;
    onSave: (template: PromptTemplate) => void;
}

const TemplateEditor: React.FC<TemplateEditorProps> = ({ 
    template, 
    isOpen, 
    onClose, 
    onSave 
}) => {
    const [formData, setFormData] = useState<Partial<PromptTemplate>>({
        name: '',
        description: '',
        systemPrompt: '',
        userPrompt: '',
        category: 'custom'
    });
    const [errors, setErrors] = useState<string[]>([]);
    const [isSubmitting, setIsSubmitting] = useState(false);

    useEffect(() => {
        if (template) {
            // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —à–∞–±–ª–æ–Ω–∞
            setFormData({
                name: template.name,
                description: template.description,
                systemPrompt: template.systemPrompt,
                userPrompt: template.userPrompt,
                category: template.category
            });
        } else {
            // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
            setFormData({
                name: '',
                description: '',
                systemPrompt: '',
                userPrompt: '',
                category: 'custom'
            });
        }
        setErrors([]);
    }, [template, isOpen]);

    const handleChange = (field: keyof PromptTemplate, value: string | TemplateCategory) => {
        setFormData(prev => ({
            ...prev,
            [field]: value
        }));
        
        // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª–µ–π
        if (errors.length > 0) {
            setErrors([]);
        }
    };

    const handleSubmit = (e: React.FormEvent) => {
        e.preventDefault();
        setIsSubmitting(true);

        const validationErrors = validateTemplate(formData);
        if (validationErrors.length > 0) {
            setErrors(validationErrors);
            setIsSubmitting(false);
            return;
        }

        const now = new Date();
        const templateToSave: PromptTemplate = {
            id: template?.id || generateTemplateId(),
            name: formData.name!,
            description: formData.description!,
            systemPrompt: formData.systemPrompt!,
            userPrompt: formData.userPrompt!,
            category: formData.category!,
            isBuiltIn: template?.isBuiltIn || false,
            createdAt: template?.createdAt || now,
            updatedAt: now
        };

        onSave(templateToSave);
        setIsSubmitting(false);
        onClose();
    };

    const handleClose = () => {
        if (!isSubmitting) {
            onClose();
        }
    };

    if (!isOpen) return null;

    const categories: TemplateCategory[] = ['code-editing', 'improvement-plan', 'refactoring-plan', 'custom'];

    return (
        <div className="modal-overlay" onClick={handleClose}>
            <div className="modal-content template-editor" onClick={(e) => e.stopPropagation()}>
                <div className="modal-header">
                    <h3>
                        {template ? '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞' : '‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞'}
                    </h3>
                    <button 
                        className="btn-close" 
                        onClick={handleClose}
                        disabled={isSubmitting}
                    >
                        ‚úï
                    </button>
                </div>

                <form onSubmit={handleSubmit} className="template-form">
                    {errors.length > 0 && (
                        <div className="error-messages">
                            {errors.map((error, index) => (
                                <div key={index} className="error-message">
                                    ‚ö†Ô∏è {error}
                                </div>
                            ))}
                        </div>
                    )}

                    <div className="form-row">
                        <div className="form-group">
                            <label htmlFor="template-name">
                                –ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ *
                            </label>
                            <input
                                id="template-name"
                                type="text"
                                value={formData.name || ''}
                                onChange={(e) => handleChange('name', e.target.value)}
                                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞"
                                disabled={isSubmitting}
                            />
                        </div>

                        <div className="form-group">
                            <label htmlFor="template-category">
                                –ö–∞—Ç–µ–≥–æ—Ä–∏—è *
                            </label>
                            <select
                                id="template-category"
                                value={formData.category || 'custom'}
                                onChange={(e) => handleChange('category', e.target.value as TemplateCategory)}
                                disabled={isSubmitting}
                            >
                                {categories.map(category => (
                                    <option key={category} value={category}>
                                        {getCategoryIcon(category)} {getCategoryName(category)}
                                    </option>
                                ))}
                            </select>
                        </div>
                    </div>

                    <div className="form-group">
                        <label htmlFor="template-description">
                            –û–ø–∏—Å–∞–Ω–∏–µ
                        </label>
                        <textarea
                            id="template-description"
                            value={formData.description || ''}
                            onChange={(e) => handleChange('description', e.target.value)}
                            placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"
                            rows={2}
                            disabled={isSubmitting}
                        />
                    </div>

                    <div className="form-group">
                        <label htmlFor="system-prompt">
                            –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç *
                            <span className="field-hint">
                                –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–æ–ª—å –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ AI
                            </span>
                        </label>
                        <textarea
                            id="system-prompt"
                            value={formData.systemPrompt || ''}
                            onChange={(e) => handleChange('systemPrompt', e.target.value)}
                            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –¢—ã –æ–ø—ã—Ç–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–¥ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–π —É–ª—É—á—à–µ–Ω–∏—è..."
                            rows={6}
                            disabled={isSubmitting}
                        />
                    </div>

                    <div className="form-group">
                        <label htmlFor="user-prompt">
                            –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç *
                            <span className="field-hint">
                                –®–∞–±–ª–æ–Ω –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ &#x7B;&#x7B;–ó–ê–î–ê–ß–ê&#x7D;&#x7D; –∏ &#x7B;&#x7B;FILES&#x7D;&#x7D;
                            </span>
                        </label>
                        <textarea
                            id="user-prompt"
                            value={formData.userPrompt || ''}
                            onChange={(e) => handleChange('userPrompt', e.target.value)}
                            placeholder="–ü—Ä–∏–º–µ—Ä: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–¥ –∏ –≤—ã–ø–æ–ª–Ω–∏: {{–ó–ê–î–ê–ß–ê}}&#10;&#10;–§–∞–π–ª—ã:&#10;{{FILES}}"
                            rows={8}
                            disabled={isSubmitting}
                        />
                    </div>

                    <div className="template-variables-help">
                        <h4>üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:</h4>
                        <ul>
                            <li><code>&#x7B;&#x7B;–ó–ê–î–ê–ß–ê&#x7D;&#x7D;</code> - –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ —Ç–µ–∫—Å—Ç, –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º</li>
                            <li><code>&#x7B;&#x7B;FILES&#x7D;&#x7D;</code> - –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤</li>
                        </ul>
                    </div>

                    <div className="modal-actions">
                        <button 
                            type="button" 
                            className="btn-secondary"
                            onClick={handleClose}
                            disabled={isSubmitting}
                        >
                            –û—Ç–º–µ–Ω–∞
                        </button>
                        <button 
                            type="submit" 
                            className="btn-primary"
                            disabled={isSubmitting}
                        >
                            {isSubmitting ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : (template ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '–°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω')}
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
};

export default TemplateEditor; 